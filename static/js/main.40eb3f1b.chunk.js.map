{"version":3,"sources":["App.js","index.js"],"names":["HomePage","Welcome","name","useParams","AboutPage","useRouteMatch","url","path","to","ContactPage","ProfilePage","history","useHistory","fakeAuth","isAuthenticated","className","onClick","signout","push","LoginPage","from","useLocation","state","pathname","authenticate","replace","callback","PrivateRoute","children","rest","location","render","Navbar","ReactDOM","useState","setIsAuthenticated","exact","document","getElementById"],"mappings":"sPAcMA,EAAW,kBAChB,kBAAC,WAAD,KACC,2CAIIC,EAAU,WAAO,IACdC,EAASC,cAATD,KACR,OACC,kBAAC,WAAD,KACC,qCAAWA,KAMRE,EAAY,WAAM,MAEDC,cAAdC,EAFe,EAEfA,IAAKC,EAFU,EAEVA,KAOb,OACC,kBAAC,WAAD,KACC,4BACC,4BACC,kBAAC,IAAD,CAAMC,GAAE,UAAKF,EAAL,WAAR,UAED,4BACC,kBAAC,IAAD,CAAME,GAAE,UAAKF,EAAL,aAAR,YAED,4BACC,kBAAC,IAAD,CAAME,GAAE,UAAKF,EAAL,YAAR,WAED,4BACC,kBAAC,IAAD,CAAME,GAAE,UAAKF,EAAL,aAAR,aAIF,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAI,UAAKA,EAAL,WACV,kBAAC,EAAD,UAQCE,EAAc,WACnB,OACC,kBAAC,WAAD,KACC,8CAKH,SAASC,IACR,IAAIC,EAAUC,cAEd,OAAOC,EAASC,gBACf,kBAAC,WAAD,KACC,4DACA,4BACCC,UAAU,SACVC,QAAS,WACRH,EAASI,SAAQ,kBAAMN,EAAQO,KAAK,UAHtC,aAUD,qDAMF,IAAMC,EAAY,WACjB,IAAIR,EAAUC,cAGRQ,GAFSC,cAESC,OAAS,CAAEF,KAAM,CAAEG,SAAU,OAA/CH,KAON,OACC,6BACC,kEAAwCA,EAAKG,UAC7C,4BAAQR,UAAU,SAASC,QATjB,WACXH,EAASW,cAAa,WACrBb,EAAQc,QAAQL,QAOhB,YAOGP,EAAW,CAChBC,iBAAiB,EAEjBU,aAHgB,SAGHE,GACZb,EAASC,iBAAkB,EAC3BY,KAGDT,QARgB,SAQRS,GACPb,EAASC,iBAAkB,EAC3BY,MAMF,SAASC,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,SAAaC,EAAQ,4BAGpCC,EAAwBD,EAAxBC,SAHoC,YAGZD,EAHY,cAI5C,OACC,kBAAC,IAAD,iBACKA,EADL,CAECE,OAAQ,kBACPlB,EAASC,gBACRc,EAEA,kBAAC,IAAD,CACCpB,GAAI,CACHe,SAAU,SACVD,MAAO,CAAEF,KAAMU,UAiBtB,IAAME,EAAS,WACd,OACC,kBAAC,WAAD,KACC,6BACC,wBAAIjB,UAAU,oCACb,4BACC,kBAAC,IAAD,CAAMP,GAAG,KAAT,SAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAED,4BACC,kBAAC,IAAD,CAAMA,GAAG,YAAT,gB,MC9KNyB,IAASF,OAAO,mBD6LD,WAAyB,IAAD,EACUG,oBAAS,GADnB,mBAC9BpB,EAD8B,KACbqB,EADa,KAGtC,OACC,kBAAC,IAAD,KACC,kBAAC,EAAD,CAAQrB,gBAAiBA,EAAiBqB,mBAAoBA,IAC9D,8BACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,OAAK,EAAC7B,KAAK,KACjB,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,UACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,YACX,kBAAC,EAAD,OAED,kBAACoB,EAAD,CAAcpB,KAAK,YAClB,kBAACG,EAAD,OAED,kBAAC,IAAD,CAAOH,KAAK,UACX,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOwB,OAAQ,kBAAM,2DCpNV,MAASM,SAASC,eAAe,W","file":"static/js/main.40eb3f1b.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport {\n\tBrowserRouter as Router,\n\tLink,\n\tRoute,\n\tSwitch,\n\tRedirect,\n\tuseParams,\n\tuseRouteMatch,\n\tuseLocation,\n\tuseHistory\n} from 'react-router-dom';\n\n// Home Page\nconst HomePage = () => (\n\t<Fragment>\n\t\t<h1>Home page</h1>\n\t</Fragment>\n);\n\nconst Welcome = () => {\n\tconst { name } = useParams();\n\treturn (\n\t\t<Fragment>\n\t\t\t<p> About {name}</p>\n\t\t</Fragment>\n\t);\n};\n\n// About Page\nconst AboutPage = () => {\n\t// getting url and path dynamically instead of manually typing in <Link/> component\n\tconst { url, path } = useRouteMatch();\n\n\t// const name =  props.match.params.name\n\t// or by distructuring props as {match:{params:{name}}}\n\t// or by using react-router-dom hooks like below\n\t// Props or placeholder(:) can only be received by the component to which prop has been passed.\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`${url}/firoj`}>Firoj</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`${url}/offrose`}>Offrose</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`${url}/sakina`}>Sakina</Link>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<Link to={`${url}/saharoj`}>Saharoj</Link>\n\t\t\t\t</li>\n\t\t\t</ul>\n\n\t\t\t<Switch>\n\t\t\t\t<Route path={`${path}/:name`}>\n\t\t\t\t\t<Welcome />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</Fragment>\n\t);\n};\n\n// Contact Page\nconst ContactPage = () => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<h1>Contact Page</h1>\n\t\t</Fragment>\n\t);\n};\n\nfunction ProfilePage() {\n\tlet history = useHistory();\n\n\treturn fakeAuth.isAuthenticated ? (\n\t\t<Fragment>\n\t\t\t<p>Welcome to your ProfilePage !</p>\n\t\t\t<button\n\t\t\t\tclassName=\"border\"\n\t\t\t\tonClick={() => {\n\t\t\t\t\tfakeAuth.signout(() => history.push('/'));\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSign out\n\t\t\t</button>\n\t\t</Fragment>\n\t) : (\n\t\t<p>You are not logged in.</p>\n\t);\n}\n\n// Redirect vs push vs history in react-router-dom\n\nconst LoginPage = () => {\n\tlet history = useHistory();\n\tlet location = useLocation();\n\n\tlet { from } = location.state || { from: { pathname: '/' } };\n\tlet login = () => {\n\t\tfakeAuth.authenticate(() => {\n\t\t\thistory.replace(from);\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<p>You must log in to view the page at {from.pathname}</p>\n\t\t\t<button className=\"border\" onClick={login}>\n\t\t\t\tLog in\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nconst fakeAuth = {\n\tisAuthenticated: false,\n\n\tauthenticate(callback) {\n\t\tfakeAuth.isAuthenticated = true;\n\t\tcallback();\n\t},\n\n\tsignout(callback) {\n\t\tfakeAuth.isAuthenticated = false;\n\t\tcallback();\n\t}\n};\n\n// Protecting Routes using react-router-dom\n\nfunction PrivateRoute({ children, ...rest }) {\n\t// children contains all the child component of </Route> as props.\n\t// rest is the props passed to this component\n\tconst { location, ...others } = rest;\n\treturn (\n\t\t<Route\n\t\t\t{...rest}\n\t\t\trender={() =>\n\t\t\t\tfakeAuth.isAuthenticated ? (\n\t\t\t\t\tchildren\n\t\t\t\t) : (\n\t\t\t\t\t<Redirect\n\t\t\t\t\t\tto={{\n\t\t\t\t\t\t\tpathname: '/login',\n\t\t\t\t\t\t\tstate: { from: location }\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t/>\n\t);\n}\n\n// <BrowserRouter/> component needs monitors the route change\n// It is better to wrap all Routes with <Switch/> Component to ensure rendering of only one path (that which matches first) at a time in case more than one match found.\n// exact means full path need to be matched in order for the components to render\n// if no path attribute is set on Route compoenent, it is default for rendering no path is matched( useful in scenerio like page not found)\n// using children attribute, all the components' params can accessed into the child component\n\n// location.pathname represents the root-relative url.\n// match.url represents the matched portion of the URL, so maybe a portion of location.pathname in case complete url is not matched.\n\nconst Navbar = () => {\n\treturn (\n\t\t<Fragment>\n\t\t\t<nav>\n\t\t\t\t<ul className=\"flex justify-around max-width-xl\">\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/\">Home</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/about\">About</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/contact\">Contact</Link>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link to=\"/profile\">Profile</Link>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t</Fragment>\n\t);\n};\n\n// <Route/> component expects the path string from the <Link/> Component called pathname which is always relative to /.  and tries to the path string specified to itself.\n// The portion of the pathname which matched with the path callled url in react-router-dom so it may not start from / always. Hence in case whole path name is matched, pathname and url looks same.\n// Link is similar to <a> tag and to is similar to href attribute in html.\n// to attribute takes path/pathname as string and passes to all the Route components\n// whenever is pathname is matched with path, an object is passed as props to the child component which is inside the <Route/>\n// the looks like {path: \" same PATH attribute from <Route/>\", location:\" PATHNAME, state:{from: \"\"} \", computedMatch:\" URL\"}.\n\nexport default function TurtorialApp() {\n\tconst [ isAuthenticated, setIsAuthenticated ] = useState(true);\n\n\treturn (\n\t\t<Router>\n\t\t\t<Navbar isAuthenticated={isAuthenticated} setIsAuthenticated={setIsAuthenticated} />\n\t\t\t<main>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<HomePage />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/about\">\n\t\t\t\t\t\t<AboutPage />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/contact\">\n\t\t\t\t\t\t<ContactPage />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<PrivateRoute path=\"/profile\">\n\t\t\t\t\t\t<ProfilePage />\n\t\t\t\t\t</PrivateRoute>\n\t\t\t\t\t<Route path=\"/login\">\n\t\t\t\t\t\t<LoginPage />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route render={() => <h1>404: page not found</h1>} />\n\t\t\t\t</Switch>\n\t\t\t</main>\n\t\t</Router>\n\t);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/framework/tailwind.custom.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}